package dev.goldenstack.loot.standard.entry;

import dev.goldenstack.loot.context.LootContext;
import dev.goldenstack.loot.structure.LootEntry;
import dev.goldenstack.loot.structure.LootModifier;
import dev.goldenstack.loot.structure.LootRequirement;
import dev.goldenstack.loot.util.LootModifierHolder;
import dev.goldenstack.loot.util.LootRequirementHolder;
import org.jetbrains.annotations.NotNull;

import java.util.ArrayList;
import java.util.List;

/**
 * Standard class for loot entries that is intended to make it easier to implement some basic features
 * @param <L> the loot item
 */
public abstract class StandardLootEntry<L> implements LootEntry<L>, LootRequirementHolder<L>, LootModifierHolder<L> {

    /**
     * The key for getting luck from a loot context instance
     */
    public static final @NotNull LootContext.Key<Long> LUCK = new LootContext.Key<>("luck");

    private final @NotNull List<LootRequirement<L>> requirements;
    private final @NotNull List<LootModifier<L>> modifiers;
    private final long weight, quality;

    /**
     * @param requirements see {@link #requirements()}
     * @param modifiers see {@link #modifiers()}
     * @param weight see {@link #weight()}
     * @param quality see {@link #quality()}
     */
    public StandardLootEntry(@NotNull List<LootRequirement<L>> requirements,
                             @NotNull List<LootModifier<L>> modifiers,
                             long weight, long quality) {
        this.requirements = List.copyOf(requirements);
        this.modifiers = List.copyOf(modifiers);
        this.weight = weight;
        this.quality = quality;
    }

    /**
     * @return the list of the requirements that are used to determine if any options should be returned
     */
    @Override
    public final @NotNull List<LootRequirement<L>> requirements() {
        return requirements;
    }

    /**
     * @return the modifiers to apply to all loot generated from all options created by this entry
     */
    @Override
    public final @NotNull List<LootModifier<L>> modifiers() {
        return modifiers;
    }

    /**
     * @return the default weight of options generated by this entry
     */
    public final long weight() {
        return weight;
    }

    /**
     * Option quality essentially means that, with higher luck on the context object, the more total weight it will
     * have. The equation is simple: {@code weight + (quality * luck)}.
     * @return the quality of options generated by this entry
     */
    public final long quality() {
        return quality;
    }

    /**
     * @return {@link #requestRawOptions(LootContext)} if {@link #passes(LootContext)} is true, otherwise an empty list
     */
    @Override
    public final @NotNull List<LootEntry.Option<L>> requestOptions(@NotNull LootContext context) {
        return passes(context) ? requestRawOptions(context) : List.of();
    }

    /**
     * @return the list of options generated by this object
     */
    protected abstract @NotNull List<LootEntry.Option<L>> requestRawOptions(@NotNull LootContext context);

    public abstract class Option implements LootEntry.Option<L> {

        /**
         * @return {@code weight + (quality * luck)}, where the luck is grabbed from the provided context
         */
        @Override
        public final long getWeight(@NotNull LootContext context) {
            Long luck = context.get(LUCK);
            return weight + quality * (luck == null ? 0 : luck);
        }

        /**
         * @return the loot items from {@link #generateRaw(LootContext)} except with all {@link #modifiers()} applied
         */
        @Override
        public final @NotNull List<L> generate(@NotNull LootContext context) {
            List<L> raw = generateRaw(context), modified = new ArrayList<>();
            for (L lootItem : raw) {
                modified.add(modify(lootItem, context));
            }
            return modified;
        }

        /**
         * @return a list of loot items
         */
        protected abstract @NotNull List<L> generateRaw(@NotNull LootContext context);
    }
}
